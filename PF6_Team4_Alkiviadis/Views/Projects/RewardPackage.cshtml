@model IEnumerable<PF6_Team4_Alkiviadis.Models.RewardPackage>

@{
    ViewData["Title"] = "RewardPackage";
}

<h1>RewardPackage</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.MaxAmountRoGetReward)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RewardDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RewardPackageId)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.MaxAmountRoGetReward)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RewardDescription)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RewardPackageId)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.RewardPackageId">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.RewardPackageId">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.RewardPackageId">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>


@section Scripts
{
    <script>
        const uri = 'RewardPackages';

        function getRewardPackages() {
            fetch(`${uri}/Get`)
                .then(response => response.json())
                .then(data => _displayRewardPackages(data))
                .catch(error => console.error('Unable to get Reward Packages.', error));
        }

        function deleteRewardPackage(id) {
            fetch(`${uri}/Delete/${id}`, {
                method: 'DELETE'
            })
                .then(() => getRewardPackages())
                .catch(error => console.error('Unable to delete Reward Package.', error));
        }

        function _displayRewardPackages(data) {
            const tBody = document.getElementById('products');
            tBody.innerHTML = '';

            const anchorElement = document.createElement('a');

            data.forEach(item => {
                let detailsAnchor = anchorElement.cloneNode(false);
                detailsAnchor.innerText = 'Details';
                detailsAnchor.setAttribute('href', `${uri}/Details/${item.id}`);

                let deleteAnchor = anchorElement.cloneNode(false);
                deleteAnchor.innerText = 'Delete';
                deleteAnchor.setAttribute('onclick', `deleteProduct(${item.id})`);
                deleteAnchor.setAttribute('href', 'javascript:void(0)');

                let tr = tBody.insertRow();

                let td1 = tr.insertCell(0);
                let codeNode = document.createTextNode(item.code);
                td1.appendChild(codeNode);

                let td2 = tr.insertCell(1);
                let nameNode = document.createTextNode(item.name);
                td2.appendChild(nameNode);

                let td3 = tr.insertCell(2);
                let descNode = document.createTextNode(item.description);
                td3.appendChild(descNode);

                let td4 = tr.insertCell(3);
                let priceNode = document.createTextNode(item.price);
                td4.appendChild(priceNode);

                let td5 = tr.insertCell(4);
                let quantityNode = document.createTextNode(item.quantity);
                td5.appendChild(quantityNode);

                let td6 = tr.insertCell(5);
                td6.appendChild(detailsAnchor);

                let td7 = tr.insertCell(6);
                td7.appendChild(deleteAnchor);
            });
        }
    </script>
}